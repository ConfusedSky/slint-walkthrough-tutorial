struct TileData {
    image: image,
    image_visible: bool,
    solved: bool,
}

component MemoryTile inherits Rectangle {
    callback clicked;
    in property <bool> open_curtain;
    in property <bool> solved;
    in property <image> icon: @image-url("icons/bus.png");

    border-radius: 8px;
    clip: true;
    height: 64px;
    width: 64px;
    background: solved ? #34CE57 : #3960D5;
    animate background { duration: 800ms; }

    states [
        open when open_curtain : {
            left_curtain.x: -(root.width / 2);
            right_curtain.x: root.width;
            in {
                animate left_curtain.x { duration: 250ms; easing: ease-in; }
                animate right_curtain.x { duration: 250ms; easing: ease-in; }
            }
            out {
                animate left_curtain.x { duration: 250ms; easing: ease-in; }
                animate right_curtain.x { duration: 250ms; easing: ease-in; }
            }
        }
    ]

    Image {
        property <length> pad: 5px;
        source: icon;
        x: self.pad;
        y: self.pad;
        width: parent.width - 2 * self.pad;
        height: parent.height - 2 * self.pad;
    }

    left_curtain := Rectangle {
        background: #193076;
        x: 0;
        width: parent.width / 2;
        height: parent.height;

        Image {
            width: parent.width;
            height: parent.height;
            source: @image-url("icons/tile_logo.png");
            source-clip-width: 64;
        }
    }

    right_curtain := Rectangle {
        background: #193076;
        x: parent.width / 2;
        width: parent.width / 2;
        height: parent.height;

        Image {
            width: parent.width;
            height: parent.height;
            source: @image-url("icons/tile_logo.png");
            source-clip-x: 64;
            source-clip-width: 64;
        }
    }

    TouchArea {
        clicked => {
            // Delegate to the user of this element
            root.clicked();
        }
    }
}

export component MainWindow inherits Window {
    min-width: 326px;
    min-height: 326px;

    callback check_if_pair_solved();
    in property <bool> disable_tiles;
    in property <bool> complete;

    in-out property <[TileData]> memory_tiles: [
        { image: @image-url("icons/at.png") },
        { image: @image-url("icons/balance-scale.png") },
        { image: @image-url("icons/bicycle.png") },
        { image: @image-url("icons/bus.png") },
        { image: @image-url("icons/cloud.png") },
        { image: @image-url("icons/cogs.png") },
        { image: @image-url("icons/motorcycle.png") },
        { image: @image-url("icons/video.png") },
    ];

    VerticalLayout {
        alignment: center;

        Rectangle {
            height: 100px;
            background: #327832;
            opacity: complete ? 1 : 0;
                 
            animate opacity { duration: 500ms; easing: ease-in; }

            GridLayout {
                Text {
                    text: "You Win!";
                }
            }
        }
    }

    VerticalLayout {
        padding: 20px;
        spacing: 5px;
        alignment: space-between;

        for row in memory_tiles.length / 4 : HorizontalLayout {
            spacing: 5px;
            alignment: space-between;
            for column in 4 : MemoryTile {
                property <TileData> tile: memory_tiles[row * 4 + column];
                width: 64px;
                height: 64px;
                icon: tile.image;
                open_curtain: tile.image_visible || tile.solved;
                solved: tile.solved;
                clicked => {
                    if (!root.disable_tiles) {
                        memory_tiles[row * 4 + column].image-visible = !tile.image-visible;
                        root.check_if_pair_solved();
                    }
                }
            }
        }
    }
}